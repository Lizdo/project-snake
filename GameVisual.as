package {	//imports	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.display.MovieClip;		public class GameVisual extends MovieClip {				private static  var instance:GameVisual;						public static function getInstance():GameVisual {			if (instance == null) {				instance = new GameVisual();			}			return instance;		}				public function GameVisual(){		}				public var background:Background = new Background();		public var gridSystem;		public var snake;		public var enemyManager;		public var gameLogic;				public function init(){			addChild(background);						gridSystem = GridSystem.getInstance();			addChild(gridSystem);						snake = Snake.getInstance();			addChild(snake);						enemyManager = EnemyManager.getInstance();			addChild(enemyManager);						background.init();			gameLogic = GameLogic.getInstance();		}						public function update(){			for each (var array in GridSystem.GridArray)				for each (var g in array)					g.updateVisual();			snake.updateVisual();			enemyManager.updateVisual();		}				public function updateBackground(time:Number){			background.update(time);			if (gameLogic.State == "State_Combo" && gameLogic.nextCombo != ""){				background.setColor(getColorByType(gameLogic.nextCombo));			}else{				background.setColor();			}					}										////////////////////////////////		///		Common functions		////////////////////////////////						public static function getColorByType(Type:String):int{			switch (Type){				case "Speed":					return 0xDED322;				case "Energy":					return 0x44AB36;				case "Absorb":					return 0xAB2F22;				default:					return 0x247278;			}			return		}						//warm		//DED322,44AB36,247278,B88421,AB2F22		//Yellow,Green,Blue , ,Red				//B25438,998A51,C9BC7C,D6D3AB,94B5AA						public static function safelyRemove(obj, objContainer){			var container = objContainer;			if (obj!=null)				if (container.contains(obj))					container.removeChild(obj);		}						public static function blendColorWithBlack(color:Number, ratio:Number):Number{			var R:Number = color >> 16 & 0xFF;			var G:Number = color >> 8  & 0xFF;			var B:Number = color & 0xFF;			R *= ratio;			G *= ratio;			B *= ratio;			var colorRBG:uint = (R << 16 | G << 8 | B);			return colorRBG;		}						public static function reset(){			instance = null;		}			}}