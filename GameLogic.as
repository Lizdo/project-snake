package {	//imports	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.display.MovieClip;	import flash.utils.Timer;	import flash.utils.getTimer;		public class GameLogic{				private static var instance:GameLogic;						public static function getInstance():GameLogic {			if (instance == null) {				instance = new GameLogic();			}			return instance;		}				private var updateTimer:Timer;		private var lastUpdatedTime:Number;					public var UPDATE_INTERVAL:Number = 40;		public var TOTAL_RUNNING_TIME:Number = 0;		public var RUNNING_TIME:Number = 0;				public var snake:Snake;		public var enemyManager;				public function GameLogic(){		}				public function init(){			snake = Snake.getInstance();			enemyManager = EnemyManager.getInstance();			updateTimer = new Timer(UPDATE_INTERVAL,1);	//inifinite Loop			updateTimer.addEventListener(TimerEvent.TIMER_COMPLETE, update);			lastUpdatedTime = getTimer();						updateTimer.start();		}						public function update(e:TimerEvent){			updateTime();			updateControl();			//updateGrids();			EnemyManager.getInstance().update();						GameVisual.getInstance().update();			snake.update();		}						private function updateTime(){			// Check if turn is Finished			TOTAL_RUNNING_TIME += UPDATE_INTERVAL;			RUNNING_TIME += UPDATE_INTERVAL;			//New Timer			var currentTime:Number = getTimer();			var newTimeInterval = UPDATE_INTERVAL - (currentTime - lastUpdatedTime - UPDATE_INTERVAL);			lastUpdatedTime = currentTime;			if (newTimeInterval <= 0)				newTimeInterval = 5;			updateTimer = new Timer(newTimeInterval,1);	//inifinite Loop			updateTimer.start();			updateTimer.addEventListener(TimerEvent.TIMER_COMPLETE, update);								}							private var _Input:String = "";		public var LastInput:String = "";		public var LAST_INPUT_UPDATE:Number = 0;				public function set Input(s:String){			if (s == _Input)				return;			if (getReverse(s) == _Input)				return;			switch (s){				case "UP":				case "DOWN":				case "LEFT":				case "RIGHT":					_Input = s;					LastInput = s;					break;			}		}				public static function getReverse(s:String):String{			if (s == "UP")				return "Down";			if (s == "DOWN")				return "UP";			if (s == "LEFT")				return "RIGHT";			if (s == "RIGHT")				return "LEFT";			return null;		}				public function get Input():String{			return _Input;		}				private function updateControl(){			if (TOTAL_RUNNING_TIME - LAST_INPUT_UPDATE >= 400/snake.Speed){				//move snake				moveSnake();				LAST_INPUT_UPDATE = TOTAL_RUNNING_TIME;				Input = "";			}		}				private function moveSnake(){			var nextGrid:Grid;			if (Input == "")				Input = LastInput;			var g:Grid = snake.head.grid;			var nextI = g.idX;			var nextJ = g.idY;			switch (Input){				case "UP":					nextJ--;					break;				case "DOWN":					nextJ++;					break;								case "LEFT":					nextI--;					break;													case "RIGHT":					nextI++;					break;				default:					return;			}						if (GridSystem.outOfBorder(nextI, nextJ)){				hitBorder();				return;			}									nextGrid = GridSystem.GridArray[nextI][nextJ];			if (snake.inBodyPartList(nextGrid)){				hitSelf(nextGrid);				return;			}			//Update GridList						var enemyHit:Boolean = false;						for each (var enemy in enemyManager.EnemyList){				if (nextGrid == enemy.grid){					enemyManager.EnemyList.splice(enemyManager.EnemyList.indexOf(enemy),1);					enemyHit = true;					break;				}			}						snake.moveToNextGrid(nextGrid, enemyHit);					}				/*private function updateGrids(){			for each (var array in GridSystem.GridArray)				for each (var g in array){					if (snake.inBodyPartList(g) == true){						g.State = "Snake";					}					else if (g.State != "Enemy")						g.State = "None";				}		}*/				private function hitSelf(nextGrid:Grid){			restart();		}				private function hitBorder(){			restart();		}				public function restart(){			trace("restart!");			updateTimer.stop();			ProjectSnake.getInstance().restart();		}						public static function reset(){			instance = null;			}					}}