package {	//imports	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.display.MovieClip;	import flash.display.Sprite;				public class BodyPart extends Sprite{				private var _grid:Grid;		public function get grid():Grid		{ 			return _grid; 		}		public function set grid(value:Grid):void		{			if (value !== _grid)			{				if (_grid && _grid.bodyPart && _grid.bodyPart == this)					_grid.bodyPart = null;				_grid = value;				value.enemy = null;				value.bodyPart = this;			}		};				private var _Type:String = "Regular";		public function get Type():String		{ 			return _Type; 		}		public function set Type(value:String):void		{			if (GameLogic.ValidType.indexOf(value) == -1)				return;			if (value != _Type)			{				_Type = value;			}		}				//Enemy Type:		//	Speed/Energy/Absorb/Regular								private var _State:String = "Normal";		public var isHead:Boolean = false;				public var energy:int = 100;				public function BodyPart(g:Grid){			if (g.enemy != null)				Type = g.enemy.Type;			else				Type = "Regular";			grid = g;			//g.State = "Enemy";		}						public function set State(s:String){			if (_State == s)				return;			switch (State){				case "Normal":				default:				_State = s;			}		}				public function get State():String{			return _State;		}				public function get Color():int{			return GameVisual.getColorByType(Type);		}				public function update(){			if (!isHead)				GameVisual.safelyRemove(headVisual, this);			if (x != grid.x || y != grid.y){				x = grid.x;				y = grid.y;				updateVisual();			}		}				private var visual:Sprite;		private var headVisual:Sprite;				private function updateVisual(){			GameVisual.safelyRemove(visual, this);			visual = new Sprite();			visual.graphics.lineStyle(1);			visual.graphics.beginFill(Color, energy/100);			visual.graphics.drawRect(0, 0, GridSystem.GRID_SIZE, GridSystem.GRID_SIZE);			visual.graphics.endFill();			addChild(visual);						if (isHead){				GameVisual.safelyRemove(headVisual, this);				headVisual = new Sprite();				//visual.graphics.lineStyle(0);				headVisual.graphics.beginFill(0x666666);				headVisual.graphics.drawCircle(GridSystem.GRID_SIZE/2, GridSystem.GRID_SIZE/2, GridSystem.GRID_SIZE * 0.2);				headVisual.graphics.endFill();				addChild(headVisual);			}		}							}}