package {	//imports	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.display.MovieClip;	import flash.display.Sprite;		import fl.transitions.Tween;	import fl.transitions.easing.*;	import fl.transitions.TweenEvent;		public class Enemy extends Sprite{				private var _grid:Grid;		public var movingInProgress:Boolean = false;		public function get grid():Grid		{ 			return _grid; 		}		public function set grid(value:Grid):void		{			if (value !== _grid)			{				if(_grid && _grid.enemy && _grid.enemy == this)					_grid.enemy = null;				_grid = value;				value.enemy = this;			}		};				private var _Type:String = "Regular";		public function get Type():String		{ 			return _Type; 		}		public function set Type(value:String):void		{			if (GameLogic.ValidType.indexOf(value) == -1)				return;			if (value != _Type)			{				_Type = value;			}		}				//Enemy Type:		//	Speed/Energy/Absorb/Regular						public static function getRandomType():String{			var index:int = Math.floor(Math.random() * (GameLogic.ValidType.length - 1));			return GameLogic.ValidType[index];		}				public function get Color():int{			return GameVisual.getColorByType(Type);		}						public function Enemy(g:Grid){			grid = g;		}				public function update(){			if (GameLogic.getInstance().TOTAL_RUNNING_TIME - lastSpawned >= (lifeSpan+spawnTime)*1000 && !deSpawnInProgress){				deSpawn();			}		}				public function init(_spawnTime:Number, _lifeSpan:Number, _despawnTime:Number){			spawnTime = _spawnTime;			lifeSpan = _lifeSpan;			despawnTime = _despawnTime;			lastSpawned = GameLogic.getInstance().TOTAL_RUNNING_TIME;			spawn();		}				private var enemySizeRatio = 0.7;				private var visual:Sprite;				private var SpawnTween;		private var DeSpawnTween;				private var spawnTime:Number;		private var lifeSpan:Number;		private var lastSpawned:int;		private var despawnTime:Number;				private var maxAlpha:Number = 1;				private function spawn(){			this.alpha = 0;			SpawnTween = new Tween(this, "alpha", Regular.easeIn, 0, maxAlpha, spawnTime, true);			SpawnTween.start();		}				private var deSpawnInProgress:Boolean = false;				private function deSpawn(){			this.alpha = maxAlpha;			DeSpawnTween = new Tween(this, "alpha", Regular.easeOut, maxAlpha, 0, despawnTime, true);			DeSpawnTween.start();			DeSpawnTween.addEventListener(TweenEvent.MOTION_FINISH, removeFromManager);			deSpawnInProgress = true;		}				private function removeFromManager(e:TweenEvent){			EnemyManager.getInstance().removeEnemy(this);		}				public function updateVisual(){			if (movingInProgress)				return;			if (x != grid.x || y != grid.y)			{				x = grid.x;				y = grid.y;			}			GameVisual.safelyRemove(visual, this);			visual = new Sprite();			var offsetX = GridSystem.GRID_SIZE * (1 - enemySizeRatio)/2;			var offsetY = GridSystem.GRID_SIZE * (1 - enemySizeRatio)/2;									visual.graphics.beginFill(Color, 0.8);			visual.graphics.lineStyle(1, GameVisual.blendColorWithBlack(Color, 0.6));			visual.graphics.drawRect(offsetX, offsetY, GridSystem.GRID_SIZE*enemySizeRatio, GridSystem.GRID_SIZE*enemySizeRatio);			//visual.alpha = 0.5;			visual.graphics.endFill();						addChild(visual);		}					}}